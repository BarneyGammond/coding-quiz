{"version":3,"sources":["components/Question/Answer.js","data/questionState/reducer.js","components/functions/shuffle.js","components/Question/Question.js","history.js","components/Question/index.js","components/Header.js","components/Start.js","components/Question/Results/index.js","components/Question/Results/Results.js","axios.js","components/Loading/index.js","actions.js","components/Loading/Loading.js","App.js","serviceWorker.js","index.js","data/reducer.js","data/initial.js"],"names":["text","answer","response","handleClicked","finalQ","useState","className","setClassName","setTimeout","onClick","he","decode","addQuestion","state","question","console","log","answerList","array","i","length","j","Math","floor","random","temp","shuffleArray","correct_answer","incorrect_answers","action","type","questionNumber","incrementQuestionNum","initial","createBrowserHistory","basename","connect","questions","dispatch","handleAnswer","finalQuestion","history","push","useReducer","reducer","answered","setAnswered","map","content","Answer","key","to","correctCount","axios","create","baseURL","questionsLoaded","handleLoad","get","then","data","loadedQuiz","results","children","useEffect","App","Header","exact","path","Start","Boolean","window","location","hostname","match","store","createStore","loadQuestions","incrementQNumber","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.80f895a9.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport he from 'he'\n\nexport default ({text, answer, response, handleClicked, finalQ}) => {\n\n    let [className, setClassName] = useState('answerBody')\n\n    if (answer && response && className === 'answerBody') {\n        setClassName('answerBody displayCorrect')\n        if (!finalQ) {setTimeout(()=> {setClassName('answerBody')},1500)}\n    }\n\n    const handleClick = () => {\n        \n        if (!response) {\n            setClassName(className += answer ? ' correct' : ' incorrect');\n            handleClicked(answer);\n            if (!finalQ) {setTimeout(()=> {setClassName('answerBody')},1500)}\n        }\n\n    }\n\n    return (\n\n        <div onClick={handleClick} className={className}>\n            <div className=\"answerPoint\"></div>\n            <h3 className=\"answerText\">{he.decode(text)}</h3>\n        </div>\n\n    )\n\n}","import shuffleArray from '../../components/functions/shuffle'\n\nconst incrementQuestionNum = (state) => {\n    return {\n        ...state,\n        questionNumber: state.questionNumber + 1\n    }\n}\n\nconst addQuestion = (state,{question}) => {\n\n    console.log(question)\n\n    let answerList = shuffleArray([question.correct_answer,...question.incorrect_answers])\n\n    return {\n        ...state,\n        question: question.question,\n        answer: question.correct_answer,\n        answerList,\n    }\n}\n\nexport default (state, action) => { \n    switch (action.type) { \n        case 'NEXT_QUESTION': return incrementQuestionNum(addQuestion(state,action))\n        default: return state; \n    } \n};","export default function shuffleArray(array) {\n    for (var i = array.length - 1; i > 0; i--) {\n        var j = Math.floor(Math.random() * (i + 1));\n        var temp = array[i];\n        array[i] = array[j];\n        array[j] = temp;\n    }\n\n    return array\n}","import React, {useReducer, useState} from 'react';\nimport Answer from './Answer';\nimport reducer from '../../data/questionState/reducer'\nimport he from 'he'\n\nconst initial = {\n    questionNumber: 0,\n}\n\nexport default ({questions,handleAnswer}) => {\n\n    const [state,dispatch] = useReducer(reducer,initial);\n\n    const [className,setClassName] = useState('questionWrapper show');\n    const [answered,setAnswered] = useState(false)\n\n    let setFirstQuestion = () => {\n        console.log(questions[state.questionNumber])\n        dispatch({\n            type: 'NEXT_QUESTION',\n            question: questions[state.questionNumber],\n        })\n    }\n\n    let finalQ = state.questionNumber > questions.length - 1;\n\n    let handleClicked = (answer) => {\n        setAnswered(true)\n        setTimeout(() => {\n            setClassName('questionWrapper')\n        }, 500)\n        setTimeout(() => {\n            handleAnswer(answer, finalQ)\n            if (!finalQ) {\n                setClassName('questionWrapper show')\n                setAnswered(false)\n                dispatch({\n                    type: 'NEXT_QUESTION',\n                    question: questions[state.questionNumber]\n                })\n            }\n        }, 1500)\n        \n    }\n\n    return !state.questionNumber ? setFirstQuestion() : (\n\n        <div className=\"questionWrapperFrame\">\n            <div className={className}>\n                <h3 className='question'>{he.decode(state.question)}</h3>\n                { state.answerList.map((content,i) => (\n\n                    <Answer \n                        finalQ={finalQ}\n                        key={i}\n                        text={content} \n                        response={answered}\n                        answer={content===state.answer} \n                        handleClicked={handleClicked}\n                    />\n                    \n                ))}\n            </div>\n        </div>\n\n    )\n\n}","import {createBrowserHistory} from 'history';\nexport default createBrowserHistory({ basename: '/coding-quiz' });","import {connect} from 'react-redux';\nimport Question from './Question'\nimport history from '../../history'\n\nconst mapStateToProps = ({questions}) => {\n    return {\n        questions\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n\n    return {\n        handleAnswer: (answer, finalQuestion) => {\n            if (finalQuestion) {history.push('/results')}\n            dispatch({type: 'Q_ANSWERED', answer})\n        }\n    }\n\n}\n\nexport default connect(mapStateToProps,mapDispatchToProps)(Question)","import React from 'react';\nimport {Link} from 'react-router-dom'\n\nexport default () => (\n\n    <header>\n        <Link to='/'><h1 className='titleText'>Revision Quiz</h1></Link>\n    </header>\n\n)","import React from 'react';\nimport {Link} from 'react-router-dom'\n\nexport default () => {\n\n    return (\n\n        <div className='buttonWrapper'>\n            <Link className='buttonNav' to='/quiz'><h2>Start</h2></Link>\n        </div>\n\n    )\n\n}","import {connect} from 'react-redux'\nimport Results from './Results'\n\nconst mapStateToProps = ({correctCount}) => ({\n    correctCount\n})\n\nexport default connect(mapStateToProps)(Results);","import React from 'react';\n\nexport default ({correctCount}) => {\n\n    return (\n        <div className='resultsWrapper'>\n            <p>You scored {correctCount} out of 10</p>\n        </div>\n    )\n\n}","import axios from 'axios';\n\nexport default axios.create({\n    baseURL: \"https://opentdb.com/api.php?amount=10&type=multiple\",\n})","import { connect } from \"react-redux\"; \nimport Loading from \"./Loading\";\nimport {getQuiz} from '../../actions'\n\nconst mapStateToProps = ({ questionsLoaded }) => (\n    { questionsLoaded, }\n);\n\nconst mapDispatchToProps = (dispatch) => ({\n    handleLoad: () => dispatch(getQuiz()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Loading);","import axios from './axios'\n\nconst loadedQuiz = (data) => {\n    return {\n        type: 'QUESTIONS_LOADED',\n        questions: data\n    }\n}\n\nexport const getQuiz = () => {\n    return (dispatch) => {\n        axios.get('').then(({data}) => {\n            dispatch(loadedQuiz(data.results))\n        });\n    };\n};","import React, {useEffect} from 'react';\n\nexport default ({children, questionsLoaded, handleLoad}) => {\n\n    useEffect(() => {\n        if (!questionsLoaded) {\n            handleLoad();\n        }\n    })\n\n    return questionsLoaded ? children : (\n\n        <div></div>\n\n    )\n\n}","import React from 'react';\nimport Question from './components/Question/';\nimport Header from './components/Header';\nimport {Router, Route} from 'react-router-dom';\nimport Start from './components/Start';\nimport history from './history';\nimport Results from './components/Question/Results/'\nimport Loading from './components/Loading'\n \nfunction App() {\n\n\treturn (\n\t\t<Router history={history}>\n\t\t\t<Header />\n\t\t\t<Route exact path='/'>\n\t\t\t\t<Start />\n\t\t\t</Route>\n\t\t\t<Route path='/quiz'>\n\t\t\t\t<Loading>\n\t\t\t\t\t<Question/>\n\t\t\t\t</Loading>\n\t\t\t</Route>\n\t\t\t<Route path='/results'>\n\t\t\t\t<Results />\n\t\t\t</Route>\n\t\t</Router>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styling/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {createStore, applyMiddleware} from 'redux';\nimport {Provider} from 'react-redux';\nimport initial from './data/initial';\nimport reducer from './data/reducer';\nimport thunk from 'redux-thunk';\nimport {composeWithDevTools} from 'redux-devtools-extension';\n\nconst store = createStore(\n  reducer, \n  initial,\n  composeWithDevTools(applyMiddleware(thunk))\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","const loadQuestions = (state, action) => {\n    \n    return {\n        ...state,\n        questionsLoaded: true,\n        questions: action.questions,\n    }\n    \n}\n\nconst incrementQNumber = (state, action) => {\n\n    return action.answer ? {\n        ...state,\n        correctCount: state.correctCount += 1\n    } : {\n        ...state,\n    }\n    \n}\n\nexport default (state, action) => { \n    switch (action.type) { \n        case \"QUESTIONS_LOADED\": return loadQuestions(state, action)\n        case \"Q_ANSWERED\": return incrementQNumber(state, action)\n        default: return state; \n    } \n};","export default {\n    questionsLoaded: false,\n    correctCount: 0,\n}"],"sourceRoot":""}