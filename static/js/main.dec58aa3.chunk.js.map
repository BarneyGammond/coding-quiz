{"version":3,"sources":["components/Question/Answer.js","data/questionSet1.js","history.js","components/Question/index.js","components/Question/Question.js","components/Header.js","components/Start.js","components/Question/Results/index.js","components/Question/Results/Results.js","App.js","serviceWorker.js","index.js","data/reducer.js","data/initial.js"],"names":["text","answer","response","handleClicked","useState","className","setClassName","onClick","setTimeout","question","false1","false2","false3","createBrowserHistory","connect","questionNumber","dispatch","handleAnswer","type","questions","length","shuffleArray","array","i","j","Math","floor","random","temp","questionClasses","setQuestionClasses","questionText","setQuestionText","answerList","setAnswerList","answered","setAnswered","history","push","reset","map","content","Answer","key","to","correctCount","App","basename","Header","exact","path","Start","Boolean","window","location","hostname","match","store","createStore","state","action","nextQuestionNumber","incrementQNumber","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.dec58aa3.chunk.js","sourcesContent":["import React, {useState} from 'react';\n\nexport default ({text, answer, response, handleClicked}) => {\n\n    let [className, setClassName] = useState('answerBody')\n\n    const handleClick = () => {\n\n        if (!response) {\n            setClassName(className += answer ? ' correct' : ' incorrect');\n            handleClicked(answer);\n            setTimeout(()=> {setClassName('answerBody')},1500)\n        }\n\n    }\n\n    return (\n\n        <div onClick={handleClick} className={className}>\n            <div className=\"answerPoint\"></div>\n            <h3 className=\"answerText\">{text}</h3>\n        </div>\n\n    )\n\n}","export default [\n    {\n        question: 'What does CSS stand for?',\n        answer: 'Cascading Style Sheet',\n        false1: 'Coordinated Styling Standards',\n        false2: 'Concatenated Section Styles',\n        false3: 'Custom Sizing Samples',\n    },\n    {\n        question: 'What does REST (API) stand for?',\n        answer: 'Representational State Management',\n        false1: 'Relational Elements Structure Manager',\n        false2: 'Required System Mainframe',\n        false3: 'Regular Structure Template',\n    },\n    {\n        question: 'Which one of these is not a method request?',\n        answer: 'OPEN',\n        false1: 'PATCH',\n        false2: 'DELETE',\n        false3: 'POST',\n    },\n    {\n        question: 'What is the name of the object that allows you to perform mathematical tasks with the interpreter?',\n        answer: 'Math',\n        false1: 'Number',\n        false2: 'Solve',\n        false3: 'Count',\n    },\n    {\n        question: 'What kind of statement is used to execute actions based on a trigger or condition?',\n        answer: 'Conditional Statement',\n        false1: 'Boolean Variable',\n        false2: 'Fired Event',\n        false3: 'Regular Expression',\n    },\n    {\n        question: 'In JavaScript, what element is used to store multiple values in a single variable?',\n        answer: 'Arrays',\n        false1: 'Variables',\n        false2: 'Functions',\n        false3: 'Strings',\n    },\n    {\n        question: 'What is the name of CSS design that calls for fluid and adaptable elements based on the device resolution or size?',\n        answer: 'Responsive',\n        false1: 'Cascading',\n        false2: 'Shifting',\n        false3: 'Evolution',\n    },\n    {\n        question: 'What is the CSS property that sets the size of the whitespace outside the borders of the content?',\n        answer: 'margin',\n        false1: 'line',\n        false2: 'break',\n        false3: 'padding',\n    },\n    {\n        question: 'Where in an HTML document is the correct place to refer to an external style sheet?',\n        answer: 'In the <head> section',\n        false1: 'In the <body> section',\n        false2: 'Anywhere you like',\n        false3: 'In the <footer> section',\n    },\n    {\n        question: 'Which is the correct CSS syntax?',\n        answer: 'body {color:black;}',\n        false1: 'body:color=black;',\n        false2: '{body;color:black}',\n        false3: '{body;color=black}',\n    }\n]","import {createBrowserHistory} from 'history';\nexport default createBrowserHistory();","import {connect} from 'react-redux';\nimport Question from './Question'\n\nconst mapStateToProps = ({questionNumber}) => {\n    return {\n        questionNumber\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n\n    return {\n        handleAnswer: (answer) => dispatch({type: 'Q_ANSWERED', answer})\n    }\n\n}\n\nexport default connect(mapStateToProps,mapDispatchToProps)(Question)","import React, {useState} from 'react';\nimport Answer from './Answer';\nimport questions from '../../data/questionSet1'\nimport history from '../../history'\n\nexport default ({questionNumber,handleAnswer}) => {\n\n    let {question,answer,false1,false2,false3} = questionNumber < questions.length ? \n        questions[questionNumber - 1] : \n        questions[questionNumber - 2]\n\n    function shuffleArray(array) {\n        for (var i = array.length - 1; i > 0; i--) {\n            var j = Math.floor(Math.random() * (i + 1));\n            var temp = array[i];\n            array[i] = array[j];\n            array[j] = temp;\n        }\n\n        return array\n    }\n\n    const [questionClasses,setQuestionClasses] = useState('questionWrapper show')\n    const [questionText,setQuestionText] = useState(question)\n    const [answerList,setAnswerList] = useState(shuffleArray([answer,false1,false2,false3]))\n    const [answered,setAnswered] = useState(false);\n\n    const handleClicked = (answer) => {\n        setAnswered(true);\n        handleAnswer(answer);\n        setTimeout(() => {\n            setQuestionClasses('questionWrapper');\n        },500)\n        setTimeout(() => {\n            setQuestionClasses('questionWrapper show')\n            questionNumber >= questions.length ? history.push('/results') : reset();\n        },1500);\n    }\n\n    const reset = () => {\n        let {question,answer,false1,false2,false3} = questions[questionNumber];\n        setQuestionText(question);\n        setAnswerList(shuffleArray([answer,false1,false2,false3]));\n        setAnswered(false);\n    }\n\n    return (\n\n        <div className=\"questionWrapperFrame\">\n            <div className={questionClasses}>\n                <h3 className='question'>{questionText}</h3>\n                { answerList.map((content,i) => (\n\n                    <Answer \n                        key={i}\n                        text={content} \n                        answer={content===answer} \n                        response={answered}\n                        handleClicked={handleClicked}\n                    />\n                    \n                ))}\n            </div>\n        </div>\n\n    )\n\n}","import React from 'react';\n\nexport default () => (\n\n    <header>\n        <h1 className='titleText'>Revision Quiz</h1>\n    </header>\n\n)","import React from 'react';\nimport {Link} from 'react-router-dom'\n\nexport default () => {\n\n    return (\n\n        <div className='buttonWrapper'>\n            <Link className='buttonNav' to='/quiz'><h2>Start</h2></Link>\n        </div>\n\n    )\n\n}","import {connect} from 'react-redux'\nimport Results from './Results'\n\nconst mapStateToProps = ({correctCount}) => ({\n    correctCount\n})\n\nexport default connect(mapStateToProps)(Results);","import React from 'react';\n\nexport default ({correctCount}) => {\n\n    return (\n        <div className='resultsWrapper'>\n            <p>You scored {correctCount} out of 10</p>\n        </div>\n    )\n\n}","import React from 'react';\nimport Question from './components/Question/';\nimport Header from './components/Header';\nimport {Router, Route} from 'react-router-dom';\nimport Start from './components/Start';\nimport history from './history';\nimport Results from './components/Question/Results/'\n \nfunction App() {\n\n\treturn (\n\t\t<Router history={history} basename={'/coding-quiz'}>\n\t\t\t<Header />\n\t\t\t<Route exact path='/'>\n\t\t\t\t<Start />\n\t\t\t</Route>\n\t\t\t<Route path='/quiz'>\n\t\t\t\t<Question/>\n\t\t\t</Route>\n\t\t\t<Route path='/results'>\n\t\t\t\t<Results />\n\t\t\t</Route>\n\t\t</Router>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styling/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {createStore} from 'redux';\nimport {Provider} from 'react-redux';\nimport initial from './data/initial';\nimport reducer from './data/reducer';\n\nconst store = createStore(\n  reducer, \n  initial,\n  window.__REDUX_DEVTOOLS_EXTENSION__ \n    && window.__REDUX_DEVTOOLS_EXTENSION__(),\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import questions from './questionSet1'\n\nconst incrementQNumber = (state, action) => {\n\n    let nextQuestionNumber = state.questionNumber < questions.length ?\n        state.questionNumber += 1 :\n        state.questionNumber\n\n    return action.answer ? {\n        ...state,\n        questionNumber: nextQuestionNumber,\n        correctCount: state.correctCount += 1\n    } : {\n        ...state,\n        questionNumber: nextQuestionNumber\n    }\n    \n}\n\nexport default (state, action) => { \n    switch (action.type) { \n        case \"Q_ANSWERED\": return incrementQNumber(state, action)\n        default: return state; \n    } \n};","export default {\n    questionNumber: 1,\n    correctCount: 0\n}"],"sourceRoot":""}